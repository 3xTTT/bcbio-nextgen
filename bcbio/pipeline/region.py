"""Provide analysis of input files by chromosomal regions.

Handle splitting and analysis of files from chromosomal subsets separated by
no-read regions.
"""
import os

from bcbio.distributed.split import (parallel_split_combine,
                                     grouped_parallel_split_combine)
from bcbio import utils
from bcbio.variation import genotype, multi

def _split_by_regions(dirname, out_ext, in_key):
    """Split a BAM file data analysis into chromosomal regions.
    """
    def _do_work(data):
        bam_file = data[in_key]
        part_info = []
        nowork = [["nochrom"], ["noanalysis", data["regions"]["noanalysis"]]]
        for region in data["regions"]["analysis"] + nowork:
            out_dir = utils.safe_makedir(os.path.join(data["dirs"]["work"], dirname,
                                                      data["name"][-1], region[0]))
            region_str = "_".join([str(x) for x in region])
            region_outfile = os.path.join(out_dir, "%s-%s%s" %
                                          (os.path.splitext(os.path.basename(bam_file))[0],
                                           region_str, out_ext))
            part_info.append((region, region_outfile))
        return None, part_info
    return _do_work

def parallel_prep_region(samples, run_parallel):
    """Perform full pre-variant calling BAM prep work on regions.
    """
    file_key = "work_bam"
    split_fn = _split_by_regions("bamprep", "-prep.bam", file_key)
    return parallel_split_combine(samples, split_fn, run_parallel,
                                  "piped_bamprep", None, file_key, ["config"])

def _split_by_ready_regions(output_ext, file_key, dir_ext_fn):
    """Organize splits into pre-built files generated by parallel_prep_region
    """
    def _do_work(data):
        if not data["regions"]["current"][0] in ["nochrom", "noanalysis"]:
            bam_file = data[file_key]
            ext = output_ext
            chrom, start, end = data["regions"]["current"]
            base = os.path.splitext(os.path.basename(bam_file))[0]
            out_dir = utils.safe_makedir(os.path.join(data["dirs"]["work"], dir_ext_fn(data)))
            out_file = os.path.join(out_dir, "{base}{ext}".format(**locals()))
            out_parts = []
            if not utils.file_exists(out_file):
                out_region_dir = utils.safe_makedir(os.path.join(out_dir, chrom))
                out_region_file = os.path.join(out_dir, "{base}{ext}".format(**locals()))
                out_parts = [(data["regions"]["current"], out_region_file)]
            return out_file, out_parts
        else:
            return None, []
    return _do_work

def parallel_variantcall_region(samples, run_parallel):
    """Perform variant calling and post-analysis on samples by region.
    """
    split_fn = _split_by_ready_regions("-variants.vcf", "work_bam", genotype.get_variantcaller)
    return grouped_parallel_split_combine(samples, split_fn,
                                          multi.group_batches, run_parallel,
                                          "variantcall_sample", "split_variants_by_sample",
                                          "combine_variant_files",
                                          "vrn_file", ["sam_ref", "config"])
